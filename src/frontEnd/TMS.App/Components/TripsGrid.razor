@using TMS.App.Domain

@namespace TMS.App.Components

@if (trips != null)
{
    <div class="table-responsive" style="width:100%">
        <table class="table table-striped table-bordered table-hover">
            <thead>
                <tr>
                    <th>Equipment ID</th>
                    <th>Origin</th>
                    <th>Destination</th>
                    <th>Start Date/Time (UTC)</th>
                    <th>End Date/Time (UTC)</th>
                    <th>Total Trip Hours</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var trip in trips)
                {
                    <tr>
                        <td>@trip.EquipmentId</td>
                        <td>@trip.OriginCity</td>
                        <td>@trip.DestinationCity</td>
                        <td>@trip.StartDateUtc.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@trip.EndDateUtc.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@trip.TotalHours.ToString("F2") hours</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => ViewTripEvents(trip)">View Events</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-warning">
        No trips found.
    </div>
})



@code {
    [Parameter]
    public List<RailcarTripModel> Trips { get; set; }

    [Parameter]
    public EventCallback<RailcarTripModel> ViewTripEvent { get; set; }

    private List<RailcarTripModel> trips = new List<RailcarTripModel>();

    private bool Loaded { get; set; } = false;

    protected override void OnParametersSet()
    {
        if (Loaded)
            return;

        //Set the Trip parameter to the local trips variable. This prevents the component from re-rendering when the trips parameter is updated.

        if (Trips != null)
            trips = Trips;

        Loaded = true;
    }
    private async Task ViewTripEvents(RailcarTripModel trip)
    {
        await ViewTripEvent.InvokeAsync(trip);
    }

}